"use strict";(self.webpackChunkelement_form_pro=self.webpackChunkelement_form_pro||[]).push([[939],{8508:function(t,e,n){n.r(e),n.d(e,{data:function(){return a}});const a={key:"v-8373bf4c",path:"/guide/component/schema.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"数据字段 prop",slug:"数据字段-prop",children:[]},{level:2,title:"组件类型 type",slug:"组件类型-type",children:[{level:3,title:"内置类型",slug:"内置类型",children:[]}]},{level:2,title:"表单属性 formItem",slug:"表单属性-formitem",children:[]},{level:2,title:"绑定值修饰符 modifier",slug:"绑定值修饰符-modifier",children:[]},{level:2,title:"属性绑定 attrs",slug:"属性绑定-attrs",children:[]},{level:2,title:"动态属性绑定 dynamicAttrs",slug:"动态属性绑定-dynamicattrs",children:[]},{level:2,title:"事件绑定 on",slug:"事件绑定-on",children:[{level:3,title:"事件 & 按键修饰符",slug:"事件-按键修饰符",children:[]}]},{level:2,title:"插槽 slot",slug:"插槽-slot",children:[]}],filePathRelative:"guide/component/schema.md",git:{updatedTime:1664346574e3,contributors:[{name:"lixiaopan",email:"lixiaopan@jd.com",commits:2}]}}},5412:function(t,e,n){n.r(e),n.d(e,{default:function(){return Et}});var a=n(6958);const s=(0,a.uE)('<h2 id="数据字段-prop" tabindex="-1"><a class="header-anchor" href="#数据字段-prop" aria-hidden="true">#</a> 数据字段 prop</h2><blockquote><p>prop 是辨别当前组件的唯一字段，既是 <code>model 和 options 的键值 key </code>，又是<code>el-form</code> 使用 <code>validate、resetFields</code> 方法的必填字段，所以需保证 prop的 唯一性</p></blockquote><h2 id="组件类型-type" tabindex="-1"><a class="header-anchor" href="#组件类型-type" aria-hidden="true">#</a> 组件类型 type</h2><blockquote><p>SchemaForm 的组件是基于 Element 进行封装，目标是完美兼容原组件的所有属性</p></blockquote><h3 id="内置类型" tabindex="-1"><a class="header-anchor" href="#内置类型" aria-hidden="true">#</a> 内置类型</h3>',5),l=(0,a._)("thead",null,[(0,a._)("tr",null,[(0,a._)("th",{style:{"text-align":"left"}},"类型"),(0,a._)("th",{style:{"text-align":"left"}},"含义"),(0,a._)("th",{style:{"text-align":"left"}},"属性参考")])],-1),p=(0,a._)("td",{style:{"text-align":"left"}},"input",-1),r=(0,a._)("td",{style:{"text-align":"left"}},"输入框",-1),o={style:{"text-align":"left"}},i={href:"https://element-plus.gitee.io/zh-CN/component/input.html",target:"_blank",rel:"noopener noreferrer"},c=(0,a.Uk)("el-input"),d=(0,a._)("td",{style:{"text-align":"left"}},"select",-1),u=(0,a._)("td",{style:{"text-align":"left"}},"选择器",-1),m={style:{"text-align":"left"}},h={href:"https://element-plus.gitee.io/zh-CN/component/select.html",target:"_blank",rel:"noopener noreferrer"},k=(0,a.Uk)("el-select"),g=(0,a._)("td",{style:{"text-align":"left"}},"radio",-1),f=(0,a._)("td",{style:{"text-align":"left"}},"单选框组",-1),b={style:{"text-align":"left"}},y={href:"https://element-plus.gitee.io/zh-CN/component/radio.html",target:"_blank",rel:"noopener noreferrer"},x=(0,a.Uk)("el-radio-group"),_=(0,a._)("td",{style:{"text-align":"left"}},"checkbox",-1),v=(0,a._)("td",{style:{"text-align":"left"}},"多选框组",-1),C={style:{"text-align":"left"}},U={href:"https://element-plus.gitee.io/zh-CN/component/checkbox.html",target:"_blank",rel:"noopener noreferrer"},w=(0,a.Uk)("el-checkbox-group"),j=(0,a._)("td",{style:{"text-align":"left"}},"cascader",-1),q=(0,a._)("td",{style:{"text-align":"left"}},"级联选择器",-1),z={style:{"text-align":"left"}},N={href:"https://element-plus.gitee.io/zh-CN/component/cascader.html",target:"_blank",rel:"noopener noreferrer"},W=(0,a.Uk)("el-cascader"),E=(0,a._)("td",{style:{"text-align":"left"}},"switch",-1),S=(0,a._)("td",{style:{"text-align":"left"}},"开关",-1),T={style:{"text-align":"left"}},I={href:"https://element-plus.gitee.io/zh-CN/component/switch.html",target:"_blank",rel:"noopener noreferrer"},A=(0,a.Uk)("el-switch"),F=(0,a._)("td",{style:{"text-align":"left"}},"slider",-1),O=(0,a._)("td",{style:{"text-align":"left"}},"滑块",-1),D={style:{"text-align":"left"}},M={href:"https://element-plus.gitee.io/zh-CN/component/slider.html",target:"_blank",rel:"noopener noreferrer"},P=(0,a.Uk)("el-slider"),H=(0,a._)("td",{style:{"text-align":"left"}},"datepicker",-1),K=(0,a._)("td",{style:{"text-align":"left"}},"日期选择器",-1),L={style:{"text-align":"left"}},R={href:"https://element-plus.gitee.io/zh-CN/component/date-picker.html",target:"_blank",rel:"noopener noreferrer"},V=(0,a.Uk)("el-date-picker"),Y=(0,a._)("td",{style:{"text-align":"left"}},"timeselect",-1),Z=(0,a._)("td",{style:{"text-align":"left"}},"固定时间",-1),B={style:{"text-align":"left"}},G={href:"https://element-plus.gitee.io/zh-CN/component/time-select.html",target:"_blank",rel:"noopener noreferrer"},J=(0,a.Uk)("el-time-select"),Q=(0,a._)("td",{style:{"text-align":"left"}},"timepicker",-1),X=(0,a._)("td",{style:{"text-align":"left"}},"任意时间",-1),$={style:{"text-align":"left"}},tt={href:"https://element-plus.gitee.io/zh-CN/component/time-picker.html",target:"_blank",rel:"noopener noreferrer"},et=(0,a.Uk)("el-time-picker"),nt=(0,a._)("td",{style:{"text-align":"left"}},"colorpicker",-1),at=(0,a._)("td",{style:{"text-align":"left"}},"颜色选择器",-1),st={style:{"text-align":"left"}},lt={href:"https://element-plus.gitee.io/zh-CN/component/color-picker.html",target:"_blank",rel:"noopener noreferrer"},pt=(0,a.Uk)("el-color-picker"),rt=(0,a._)("td",{style:{"text-align":"left"}},"progress",-1),ot=(0,a._)("td",{style:{"text-align":"left"}},"进度条",-1),it={style:{"text-align":"left"}},ct={href:"https://element-plus.gitee.io/zh-CN/component/progress.html",target:"_blank",rel:"noopener noreferrer"},dt=(0,a.Uk)("el-progress"),ut=(0,a._)("td",{style:{"text-align":"left"}},"rate",-1),mt=(0,a._)("td",{style:{"text-align":"left"}},"评分",-1),ht={style:{"text-align":"left"}},kt={href:"https://element-plus.gitee.io/zh-CN/component/rate.html",target:"_blank",rel:"noopener noreferrer"},gt=(0,a.Uk)("el-rate"),ft=(0,a.uE)('<h2 id="表单属性-formitem" tabindex="-1"><a class="header-anchor" href="#表单属性-formitem" aria-hidden="true">#</a> 表单属性 formItem</h2><blockquote><p>兼容所有el-form-item的属性,以下内容为常用属性</p></blockquote><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th><th style="text-align:left;">类型</th><th style="text-align:left;">可选值</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">label</td><td style="text-align:left;">标签文本</td><td style="text-align:left;">string</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">label-width</td><td style="text-align:left;">表单域标签的的宽度，例如 &#39;50px&#39;。支持 auto</td><td style="text-align:left;">string</td><td style="text-align:left;">—</td><td style="text-align:left;">—</td></tr><tr><td style="text-align:left;">show-message</td><td style="text-align:left;">是否显示校验错误信息</td><td style="text-align:left;">boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">true</td></tr><tr><td style="text-align:left;">inline-message</td><td style="text-align:left;">以行内形式展示校验信息</td><td style="text-align:left;">boolean</td><td style="text-align:left;">—</td><td style="text-align:left;">false</td></tr><tr><td style="text-align:left;">size</td><td style="text-align:left;">用于控制该表单域下组件的尺寸</td><td style="text-align:left;">string</td><td style="text-align:left;">medium / small / mini</td><td style="text-align:left;">-</td></tr></tbody></table><h2 id="绑定值修饰符-modifier" tabindex="-1"><a class="header-anchor" href="#绑定值修饰符-modifier" aria-hidden="true">#</a> 绑定值修饰符 modifier</h2><blockquote><p>为了更好的支持数值绑定，增加了<code>v-model</code>的修饰符，现支持</p></blockquote><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">number</td><td style="text-align:left;">自动将用户的输入值转为数值类型</td></tr><tr><td style="text-align:left;">trim</td><td style="text-align:left;">自动过滤用户输入的首尾空白字符</td></tr></tbody></table><h2 id="属性绑定-attrs" tabindex="-1"><a class="header-anchor" href="#属性绑定-attrs" aria-hidden="true">#</a> 属性绑定 attrs</h2>',7),bt=(0,a.Uk)("支持Element组件的属性，以"),yt=(0,a._)("code",null,"el-input",-1),xt=(0,a.Uk)("为例,具体参数 可参考 "),_t={href:"https://element.eleme.cn/#/zh-CN",target:"_blank",rel:"noopener noreferrer"},vt=(0,a.Uk)("Element"),Ct=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token punctuation">{</span>\n   type<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>\n   prop<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>\n   attrs<span class="token operator">:</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;textarea&#39;</span> <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="动态属性绑定-dynamicattrs" tabindex="-1"><a class="header-anchor" href="#动态属性绑定-dynamicattrs" aria-hidden="true">#</a> 动态属性绑定 dynamicAttrs</h2><blockquote><p>除了绑定的静态属性外，还支持动态属性的绑定，例如用于与其它操作联动</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token punctuation">{</span>\n   type<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>\n   prop<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>\n   dynamicAttrs<span class="token operator">:</span> <span class="token punctuation">{</span> disabled<span class="token operator">:</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>model<span class="token punctuation">.</span>id <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="事件绑定-on" tabindex="-1"><a class="header-anchor" href="#事件绑定-on" aria-hidden="true">#</a> 事件绑定 on</h2>',5),Ut=(0,a.Uk)("支持Element组件的事件，以"),wt=(0,a._)("code",null,"el-input",-1),jt=(0,a.Uk)("为例,具体参数 可参考 "),qt={href:"https://element.eleme.cn/#/zh-CN",target:"_blank",rel:"noopener noreferrer"},zt=(0,a.Uk)("Element"),Nt=(0,a.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code> <span class="token punctuation">{</span>\n   type<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>\n   prop<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>\n   on<span class="token operator">:</span> <span class="token punctuation">{</span> focus<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onNameFocus <span class="token punctuation">}</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="事件-按键修饰符" tabindex="-1"><a class="header-anchor" href="#事件-按键修饰符" aria-hidden="true">#</a> 事件 &amp; 按键修饰符</h3><blockquote><p>对于 .passive、.capture 和 .once 这些事件修饰符, Vue 提供了相应的前缀可以用于 on</p></blockquote><table><thead><tr><th style="text-align:left;">修饰符</th><th style="text-align:left;">前缀</th></tr></thead><tbody><tr><td style="text-align:left;">.passive</td><td style="text-align:left;">&amp;</td></tr><tr><td style="text-align:left;">.capture</td><td style="text-align:left;">!</td></tr><tr><td style="text-align:left;">.once</td><td style="text-align:left;">~</td></tr><tr><td style="text-align:left;">.capture.once 或 .once.capture</td><td style="text-align:left;">~!</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>on<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;!click&#39;</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doThisInCapturingMode<span class="token punctuation">,</span>\n  <span class="token string">&#39;~keyup&#39;</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doThisOnce<span class="token punctuation">,</span>\n  <span class="token string">&#39;~!mouseover&#39;</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>doThisOnceInCapturingMode\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>对于所有其它的修饰符，私有前缀都不是必须的，因为你可以在事件处理函数中使用事件方法：</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>on<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">keyup</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// .self 等价于 如果触发事件的元素不是事件绑定的元素则返回</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>target <span class="token operator">!==</span> event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token comment">// 如果按下去的不是 enter 键或者</span>\n    <span class="token comment">// 没有同时按下 shift 键</span>\n    <span class="token comment">// 则返回</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>event<span class="token punctuation">.</span>shiftKey <span class="token operator">||</span> event<span class="token punctuation">.</span>keyCode <span class="token operator">!==</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token keyword">return</span>\n    <span class="token comment">// 阻止 事件冒泡</span>\n    event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 阻止该元素默认的 keyup 事件</span>\n    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="插槽-slot" tabindex="-1"><a class="header-anchor" href="#插槽-slot" aria-hidden="true">#</a> 插槽 slot</h2><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">slot</td><td style="text-align:left;">自定义完整组件</td></tr><tr><td style="text-align:left;">labelSlot</td><td style="text-align:left;">用于 el-form-item 中的 label插槽</td></tr><tr><td style="text-align:left;">frontSlot</td><td style="text-align:left;">定义element 组件前的插槽</td></tr><tr><td style="text-align:left;">rearSlot</td><td style="text-align:left;">定义element 组件后的插槽</td></tr></tbody></table>',9),Wt={};var Et=(0,n(496).Z)(Wt,[["render",function(t,e){const n=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[s,(0,a._)("table",null,[l,(0,a._)("tbody",null,[(0,a._)("tr",null,[p,r,(0,a._)("td",o,[(0,a._)("a",i,[c,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[d,u,(0,a._)("td",m,[(0,a._)("a",h,[k,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[g,f,(0,a._)("td",b,[(0,a._)("a",y,[x,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[_,v,(0,a._)("td",C,[(0,a._)("a",U,[w,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[j,q,(0,a._)("td",z,[(0,a._)("a",N,[W,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[E,S,(0,a._)("td",T,[(0,a._)("a",I,[A,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[F,O,(0,a._)("td",D,[(0,a._)("a",M,[P,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[H,K,(0,a._)("td",L,[(0,a._)("a",R,[V,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[Y,Z,(0,a._)("td",B,[(0,a._)("a",G,[J,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[Q,X,(0,a._)("td",$,[(0,a._)("a",tt,[et,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[nt,at,(0,a._)("td",st,[(0,a._)("a",lt,[pt,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[rt,ot,(0,a._)("td",it,[(0,a._)("a",ct,[dt,(0,a.Wm)(n)])])]),(0,a._)("tr",null,[ut,mt,(0,a._)("td",ht,[(0,a._)("a",kt,[gt,(0,a.Wm)(n)])])])])]),ft,(0,a._)("blockquote",null,[(0,a._)("p",null,[bt,yt,xt,(0,a._)("a",_t,[vt,(0,a.Wm)(n)])])]),Ct,(0,a._)("blockquote",null,[(0,a._)("p",null,[Ut,wt,jt,(0,a._)("a",qt,[zt,(0,a.Wm)(n)])])]),Nt],64)}]])}}]);